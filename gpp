#!/bin/bash
#
# gpp: git pull and push sugar
#
# written by Luke Morton, 2012
# licensed under MIT
# https://github.com/DrPheltRight/gpp

GIT_MERGE_AUTOEDIT=no

if [ -z "$OUT" ]; then
	if [ -n "$DEBUG" ]; then
		OUT=/dev/stdout
	else
		OUT=/dev/null
	fi
fi

start()
{
	CURRENT_MESSAGE="$1..."
	echo -en "$CURRENT_MESSAGE \033[0;31m\r"
}

end()
{
	if [ -n "$FAILED" ]; then
		exit 1
	fi

	if [ "$?" -gt "0" ]; then
		FAILED=1

		echo "$CURRENT_MESSAGE failed."

		if [ -n "$HAS_STASH" ]; then
			git_stash_pop
		fi
		
		exit 1
	fi

	tput sgr0
	echo "$CURRENT_MESSAGE done."
}

end_custom()
{
	tput sgr0
	echo "$CURRENT_MESSAGE $1."
}

git_stash()
{
	start "Stashing"

	git stash save > "$OUT"

	end
}

git_stash_pop()
{
	start "Unstashing"

	git stash pop > "$OUT"

	end
}

git_pull()
{
	start "Pulling changes"

	local pull=`git pull --no-edit 2>&1`

	echo "$pull" | grep -q -v "Already up-to-date."

	local up_to_date="$?"

	if [ -n "$DEBUG" ]; then
		echo "$pull"
	fi

	if [ "$up_to_date" -gt "0" ]; then
		end_custom "none"
		return 0
	fi

	end
}

git_before_push()
{
	if [ -f .gpp ]; then
		echo "Found .gpp file, executing additional binaries before push."

		while read line
		do
			start "Executing $line"

			$line > "$OUT"
			
			end
		done < .gpp
	fi
}

git_push()
{
	start "Pushing changes"

	local push=`git push 2>&1`

	echo "$push" | grep -q -v "Everything up-to-date"

	# If greater than 0 everything is up to date (not quite
	# postfix is it o_0)
	local up_to_date="$?"

	if [ -n "$DEBUG" ]; then
		echo "$push"
	fi

	if [ "$up_to_date" -gt "0" ]; then
		end_custom "none"
		return 0
	fi

	end
}

gpp()
{
	if [ ! -d .git ]; then
		echo "You must run gpp in the root directory of a git repository."
		exit 1
	fi

	HAS_STASH=`git status -uno -s`

	if [ -n "$DEBUG" ]; then
		echo "$HAS_STASH"
	fi

	if [ -n "$HAS_STASH" ]; then
		echo $HAS_STASH | grep -q -v "\U\U"
		
		local unmerged="$?"

		if [ "$unmerged" -gt "0" ]; then
			echo "Unmerged changes... sort it out."
			exit 1
		fi

		git_stash
	fi

	git_pull

	git_before_push

	git_push

	if [ -n "$HAS_STASH" ]; then
		git_stash_pop
	fi
}

gpp
